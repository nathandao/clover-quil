{:rename-macros {}, :renames {}, :use-macros {}, :excludes #{}, :name clover.core, :imports nil, :requires {q quil.core, quil.core quil.core, m quil.middleware, quil.middleware quil.middleware}, :uses nil, :defs {step {:name clover.core/step, :file "src/clover/core.cljs", :line 5, :column 1, :end-line 5, :end-column 10, :meta {:file "/home/ndao/pimpin/clover/src/clover/core.cljs", :line 5, :column 6, :end-line 5, :end-column 10}, :tag any}, f {:protocol-inline nil, :meta {:file "/home/ndao/pimpin/clover/src/clover/core.cljs", :line 7, :column 7, :end-line 7, :end-column 8, :arglists (quote ([t]))}, :name clover.core/f, :variadic false, :file "src/clover/core.cljs", :end-column 8, :method-params ([t]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 7, :end-line 7, :max-fixed-arity 1, :fn-var true, :arglists (quote ([t]))}, draw {:protocol-inline nil, :meta {:file "/home/ndao/pimpin/clover/src/clover/core.cljs", :line 17, :column 7, :end-line 17, :end-column 11, :arglists (quote ([]))}, :name clover.core/draw, :variadic false, :file "src/clover/core.cljs", :end-column 11, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 17, :end-line 17, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, setup {:protocol-inline nil, :meta {:file "/home/ndao/pimpin/clover/src/clover/core.cljs", :line 23, :column 7, :end-line 23, :end-column 12, :arglists (quote ([]))}, :name clover.core/setup, :variadic false, :file "src/clover/core.cljs", :end-column 12, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 23, :end-line 23, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, clover {:protocol-inline nil, :meta {:file "/home/ndao/pimpin/clover/src/clover/core.cljs", :line 28, :column 14, :end-line 28, :end-column 20, :export true, :arglists (quote ([]))}, :name clover.core/clover, :variadic false, :file "src/clover/core.cljs", :end-column 20, :method-params ([]), :protocol-impl nil, :export true, :arglists-meta (nil nil), :column 1, :line 28, :end-line 28, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}}, :require-macros {q quil.core, quil.core quil.core}, :cljs.analyzer/constants {:seen #{:fn :size :setup :host :host-id :no-start :draw}, :order [:host :size :setup :draw :no-start :fn :host-id]}, :doc nil}